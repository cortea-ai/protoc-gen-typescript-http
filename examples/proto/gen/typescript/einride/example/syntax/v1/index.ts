// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */

// Enum
export type Enum =
  // ENUM_UNSPECIFIED
  | "ENUM_UNSPECIFIED"
  // ENUM_ONE
  | "ENUM_ONE"
  // ENUM_TWO
  | "ENUM_TWO";
// Message
export type Message = {
  // double
  double?: number;
  // float
  float?: number;
  // int32
  int32?: number;
  // int64
  int64?: number;
  // uint32
  uint32?: number;
  // uint64
  uint64?: number;
  // sint32
  sint32?: number;
  // sint64
  sint64?: number;
  // fixed32
  fixed32?: number;
  // fixed64
  fixed64?: number;
  // sfixed32
  sfixed32?: number;
  // sfixed64
  sfixed64?: number;
  // bool
  bool?: boolean;
  // string
  string?: string;
  // bytes
  bytes?: string;
  // enum
  enum?: Enum;
  // message
  message?: Message;
  // optional double
  optional_double?: number;
  // optional float
  optional_float?: number;
  // optional int32
  optional_int32?: number;
  // optional int64
  optional_int64?: number;
  // optional uint32
  optional_uint32?: number;
  // optional uint64
  optional_uint64?: number;
  // optional sint32
  optional_sint32?: number;
  // optional sint64
  optional_sint64?: number;
  // optional fixed32
  optional_fixed32?: number;
  // optional fixed64
  optional_fixed64?: number;
  // optional sfixed32
  optional_sfixed32?: number;
  // optional sfixed64
  optional_sfixed64?: number;
  // optional bool
  optional_bool?: boolean;
  // optional string
  optional_string?: string;
  // optional bytes
  optional_bytes?: string;
  // optional enum
  optional_enum?: Enum;
  // optional message
  optional_message?: Message;
  // repeated_double
  repeated_double?: number[];
  // repeated_float
  repeated_float?: number[];
  // repeated_int32
  repeated_int32?: number[];
  // repeated_int64
  repeated_int64?: number[];
  // repeated_uint32
  repeated_uint32?: number[];
  // repeated_uint64
  repeated_uint64?: number[];
  // repeated_sint32
  repeated_sint32?: number[];
  // repeated_sint64
  repeated_sint64?: number[];
  // repeated_fixed32
  repeated_fixed32?: number[];
  // repeated_fixed64
  repeated_fixed64?: number[];
  // repeated_sfixed32
  repeated_sfixed32?: number[];
  // repeated_sfixed64
  repeated_sfixed64?: number[];
  // repeated_bool
  repeated_bool?: boolean[];
  // repeated_string
  repeated_string?: string[];
  // repeated_bytes
  repeated_bytes?: string[];
  // repeated_enum
  repeated_enum?: Enum[];
  // repeated_message
  repeated_message?: Message[];
  // map_string_string
  map_string_string?: { [key: string]: string };
  // map_string_message
  map_string_message?: { [key: string]: Message };
  // oneof_string
  oneof_string?: string;
  // oneof_enum
  oneof_enum?: Enum;
  // oneof_message1
  oneof_message1?: Message;
  // oneof_message2
  oneof_message2?: Message;
  // any
  any?: wellKnownAny;
  // repeated_any
  repeated_any?: wellKnownAny[];
  // duration
  duration?: wellKnownDuration;
  // repeated_duration
  repeated_duration?: wellKnownDuration[];
  // empty
  empty?: wellKnownEmpty;
  // repeated_empty
  repeated_empty?: wellKnownEmpty[];
  // field_mask
  field_mask?: wellKnownFieldMask;
  // repeated_field_mask
  repeated_field_mask?: wellKnownFieldMask[];
  // struct
  struct?: wellKnownStruct;
  // repeated_struct
  repeated_struct?: wellKnownStruct[];
  // value
  value?: wellKnownValue;
  // repeated_value
  repeated_value?: wellKnownValue[];
  // null_value
  null_value?: wellKnownNullValue;
  // repeated_null_value
  repeated_null_value?: wellKnownNullValue[];
  // list_value
  list_value?: wellKnownListValue;
  // repeated_list_value
  repeated_list_value?: wellKnownListValue[];
  // bool_value
  bool_value?: wellKnownBoolValue;
  // repeated_bool_value
  repeated_bool_value?: wellKnownBoolValue[];
  // bytes_value
  bytes_value?: wellKnownBytesValue;
  // repeated_bytes_value
  repeated_bytes_value?: wellKnownBytesValue[];
  // double_value
  double_value?: wellKnownDoubleValue;
  // repeated_double_value
  repeated_double_value?: wellKnownDoubleValue[];
  // float_value
  float_value?: wellKnownFloatValue;
  // repeated_float_value
  repeated_float_value?: wellKnownFloatValue[];
  // int32_value
  int32_value?: wellKnownInt32Value;
  // repeated_int32_value
  repeated_int32_value?: wellKnownInt32Value[];
  // int64_value
  int64_value?: wellKnownInt64Value;
  // repeated_int64_value
  repeated_int64_value?: wellKnownInt64Value[];
  // uint32_value
  uint32_value?: wellKnownUInt32Value;
  // repeated_uint32_value
  repeated_uint32_value?: wellKnownUInt32Value[];
  // uint64_value
  uint64_value?: wellKnownUInt64Value;
  // repeated_uint64_value
  repeated_uint64_value?: wellKnownUInt64Value[];
  // string_value
  string_value?: wellKnownUInt64Value;
  // repeated_string_value
  repeated_string_value?: wellKnownStringValue[];
};

// If the Any contains a value that has a special JSON mapping,
// it will be converted as follows:
// {"@type": xxx, "value": yyy}.
// Otherwise, the value will be converted into a JSON object,
// and the "@type" field will be inserted to indicate the actual data type.
interface wellKnownAny {
  "@type": string;
  [key: string]: unknown;
}

// Generated output always contains 0, 3, 6, or 9 fractional digits,
// depending on required precision, followed by the suffix "s".
// Accepted are any fractional digits (also none) as long as they fit
// into nano-seconds precision and the suffix "s" is required.
type wellKnownDuration = string;

// An empty JSON object
type wellKnownEmpty = Record<never, never>;

// In JSON, a field mask is encoded as a single string where paths are
// separated by a comma. Fields name in each path are converted
// to/from lower-camel naming conventions.
// As an example, consider the following message declarations:
//
//     message Profile {
//       User user = 1;
//       Photo photo = 2;
//     }
//     message User {
//       string display_name = 1;
//       string address = 2;
//     }
//
// In proto a field mask for `Profile` may look as such:
//
//     mask {
//       paths: "user.display_name"
//       paths: "photo"
//     }
//
// In JSON, the same mask is represented as below:
//
//     {
//       mask: "user.displayName,photo"
//     }
type wellKnownFieldMask = string;

// Any JSON value.
type wellKnownStruct = Record<string, unknown>;

type wellKnownValue = unknown;

type wellKnownNullValue = null;

type wellKnownListValue = wellKnownValue[];

type wellKnownBoolValue = boolean | null;

type wellKnownBytesValue = string | null;

type wellKnownDoubleValue = number | null;

type wellKnownFloatValue = number | null;

type wellKnownInt32Value = number | null;

type wellKnownInt64Value = number | null;

type wellKnownUInt32Value = number | null;

type wellKnownUInt64Value = number | null;

type wellKnownStringValue = string | null;

// NestedMessage
export type Message_NestedMessage = {
  // nested_message.string
  string?: string;
};

// NestedEnum
export type Message_NestedEnum =
  // NESTEDENUM_UNSPECIFIED
  "NESTEDENUM_UNSPECIFIED";
export type Request = {
  string?: string;
  repeated_string?: string[];
  nested?: Request_Nested;
};

export type Request_Nested = {
  string?: string;
};

export interface SyntaxService {
  QueryOnly(request: Request): Promise<Message>;
  EmptyVerb(request: wellKnownEmpty): Promise<wellKnownEmpty>;
  StarBody(request: Request): Promise<Message>;
  Body(request: Request): Promise<Message>;
  Path(request: Request): Promise<Message>;
  PathBody(request: Request): Promise<Message>;
}

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType, meta: { service: string, method: string }) => Promise<unknown>;

export function createSyntaxServiceClient(
  handler: RequestHandler
): SyntaxService {
  return {
    QueryOnly(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.string) {
        queryParams.push(`string=${encodeURIComponent(request.string.toString())}`)
      }
      if (request.repeated_string) {
        request.repeated_string.forEach((x) => {
          queryParams.push(`repeated_string=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.nested?.string) {
        queryParams.push(`nested.string=${encodeURIComponent(request.nested.string.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "SyntaxService",
        method: "QueryOnly",
      }) as Promise<Message>;
    },
    EmptyVerb(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1:emptyVerb`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "SyntaxService",
        method: "EmptyVerb",
      }) as Promise<wellKnownEmpty>;
    },
    StarBody(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1:starBody`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "SyntaxService",
        method: "StarBody",
      }) as Promise<Message>;
    },
    Body(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1:body`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.nested ?? {});
      const queryParams: string[] = [];
      if (request.string) {
        queryParams.push(`string=${encodeURIComponent(request.string.toString())}`)
      }
      if (request.repeated_string) {
        request.repeated_string.forEach((x) => {
          queryParams.push(`repeated_string=${encodeURIComponent(x.toString())}`)
        })
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "SyntaxService",
        method: "Body",
      }) as Promise<Message>;
    },
    Path(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.string) {
        throw new Error("missing required field request.string");
      }
      const path = `v1/${request.string}:path`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.repeated_string) {
        request.repeated_string.forEach((x) => {
          queryParams.push(`repeated_string=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.nested?.string) {
        queryParams.push(`nested.string=${encodeURIComponent(request.nested.string.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "SyntaxService",
        method: "Path",
      }) as Promise<Message>;
    },
    PathBody(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.string) {
        throw new Error("missing required field request.string");
      }
      const path = `v1/${request.string}:pathBody`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.nested ?? {});
      const queryParams: string[] = [];
      if (request.repeated_string) {
        request.repeated_string.forEach((x) => {
          queryParams.push(`repeated_string=${encodeURIComponent(x.toString())}`)
        })
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "SyntaxService",
        method: "PathBody",
      }) as Promise<Message>;
    },
  };
}

// @@protoc_insertion_point(typescript-http-eof)
